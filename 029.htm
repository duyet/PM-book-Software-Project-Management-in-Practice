<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title>Chapter 5. Quality Planning</title>

<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0cm;
	margin-left:0cm;
	font-size:18.0pt;
	font-family:"Times New Roman";
	color:#354278;}
p.doctext, li.doctext, div.doctext
	{margin-right:0cm;
	margin-left:0cm;
	font-size:10.5pt;
	font-family:"Times New Roman";
	color:black;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:3.0cm 2.0cm 3.0cm 2.0cm;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=DA>

<div class=Section1>

<h2><span lang=EN-GB style='font-size:16.5pt;font-family:Arial'>Chapter 5.
Quality Planning</span></h2>

<p class=doctext><span lang=EN-GB>Until a few years ago, software engineering
suffered the same tragic notion of quality that manufacturing companies had
much earlier—that quality was something that was done at the end of the
assembly/development process, before the product was to be delivered. It was
common to see quality-conscious project managers plan for system testing after
the development (other project managers did not even plan properly for system
testing!) but fail to give any importance to quality control tasks during
development. The result? System testing frequently revealed many more defects
than anticipated. These defects, in turn, required much more effort than
planned for repair, finally resulting in buggy software that was delivered
late.</span></p>

<p class=doctext><span lang=EN-GB>As the situation improved, project managers
started planning for reviews and unit testing. But they did not know how to
judge the effectiveness and implications of these measures. In other words,
projects still lacked clear quality goals, convincing plans to achieve their
goals, and mechanisms to monitor the effectiveness of quality control tasks
such as unit testing.</span></p>

<p class=doctext><span lang=EN-GB>With proper use of measurements and past
data, it is possible to treat quality in the same way you treat the other two
key parameters: effort and schedule. That is, you can set quantitative quality
goals, along with subgoals that will help track the project's progress toward
achieving the quality goal.</span></p>

<p class=doctext><span lang=EN-GB>This chapter discusses how project managers
at Infosys set the quality goals for their projects and how they develop a plan
to achieve these goals using intermediate quality goals to monitor their
progress. Before we describe Infosys's approach, we briefly discuss some
general concepts of quality management.</span></p>

<p class=MsoNormal><span lang=EN-GB>&nbsp;</span></p>

</div>

</body>

</html>
